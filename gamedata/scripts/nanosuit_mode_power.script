---==================================================================================================================---
---                                                                                                                  ---
---    Original Author(s) : NLTP_ASHES                                                                               ---
---    Edited : N/A                                                                                                  ---
---    Date : 30/03/2025                                                                                             ---
---    License : Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International (CC BY-NC-SA 4.0)           ---
---                                                                                                                  ---
---    Script used to handle the logic of strength mode of the Nanosuit addon.                                       ---
---                                                                                                                  ---
---==================================================================================================================---

-- ---------------------------------------------------------------------------------------------------------------------
-- Constants, global variables and imported functions
-- ---------------------------------------------------------------------------------------------------------------------

-- ---------------------------------------------------------------------------------------------------------------------
-- Strength mode class
-- ---------------------------------------------------------------------------------------------------------------------

class "power" (nanosuit_mode.abstract_mode)

function power:__init(core, name) super(core, name)
    -- Energy related variables
    self.m_energy_use_shoot = 4
    self.m_energy_use_power_jump = 20

    -- Cache
    self.m_cache["jump_speed"] = db.actor:get_actor_jump_speed()
    self.m_cache["wpn_dispersion"] = nil
    self.m_cache["wpn_dispersion_zoom"] = nil

    -- Sound effects
    self.m_sounds["power_voice"] = sound_object([[nanosuit\mode_power_voice]])
    self.m_sounds["power_jump"] = sound_object([[nanosuit\mode_power_jump]])
end

function power:apply_effects()
    -- Play sounds
    self.m_sounds.power_voice:play_at_pos(db.actor, VEC_ZERO, 0, sound_object.s2d)

    -- Register callbacks
    RegisterScriptCallback("actor_on_jump", self)
    RegisterScriptCallback("actor_on_update", self)
    RegisterScriptCallback("actor_on_weapon_fired", self)

    -- Save jump speed
    self.m_cache["jump_speed"] = db.actor:get_actor_jump_speed()
end

function power:remove_effects()
    -- Unregister callbacks
    UnregisterScriptCallback("actor_on_jump", self)
    UnregisterScriptCallback("actor_on_update", self)
    UnregisterScriptCallback("actor_on_weapon_fired", self)

    -- Reset jump speed
    db.actor:set_actor_jump_speed(self.m_cache["jump_speed"])
end

function power:actor_on_update()
    local has_enough_energy = self.m_core.m_energy >= self.m_core.m_energy_low_threshold

    -- FIXME : This only works if actor does not change weapons while power mode is active
    local obj = db.actor:active_item()
    if not obj or not IsWeapon(obj) then
        return
    end

    local wpn_obj = obj:cast_Weapon()

    if has_enough_energy and not self.m_cache["wpn_dispersion"] and not self.m_cache["wpn_dispersion_zoom"] then
        self.m_cache["wpn_dispersion"] = wpn_obj:GetCamDispersion()
        self.m_cache["wpn_dispersion_zoom"] = wpn_obj:GetZoomCamDispersion()
        wpn_obj:SetCamDispersion(self.m_cache["wpn_dispersion"] * 0.1)
        wpn_obj:SetZoomCamDispersion(self.m_cache["wpn_dispersion_zoom"] * 0.1)
    elseif not has_enough_energy and self.m_cache["wpn_dispersion"] and self.m_cache["wpn_dispersion_zoom"] then
        wpn_obj:SetCamDispersion(self.m_cache["wpn_dispersion"])
        wpn_obj:SetZoomCamDispersion(self.m_cache["wpn_dispersion_zoom"])
        self.m_cache["wpn_dispersion"] = nil
        self.m_cache["wpn_dispersion_zoom"] = nil
    end
end

function power:actor_on_jump()
    -- Play sounds
    if (self.m_core.m_energy >= self.m_energy_use_power_jump) then
        self.m_sounds.power_jump:play_at_pos(db.actor, VEC_ZERO, 0, sound_object.s2d)
    end
    self.m_core:use_energy(self.m_energy_use_power_jump)

    -- Set jump speed (inversely proportional to energy)
    local jump_multiplier = 1 + self.m_core.m_energy / 100
    db.actor:set_actor_jump_speed(self.m_cache["jump_speed"] * jump_multiplier)
end

function power:actor_on_weapon_fired()
    self.m_core:use_energy(self.m_energy_use_shoot)
end
