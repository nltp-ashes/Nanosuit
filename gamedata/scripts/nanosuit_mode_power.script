---==================================================================================================================---
---                                                                                                                  ---
---    Original Author(s) : NLTP_ASHES                                                                               ---
---    Edited : N/A                                                                                                  ---
---    Date : 04/05/2025                                                                                             ---
---    License : Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International (CC BY-NC-SA 4.0)           ---
---                                                                                                                  ---
---    Script used to handle the logic of strength mode of the Nanosuit addon.                                       ---
---                                                                                                                  ---
---==================================================================================================================---

-- ---------------------------------------------------------------------------------------------------------------------
-- Constants, global variables and imported functions
-- ---------------------------------------------------------------------------------------------------------------------

-- Imports
localized_sound_object  = nanosuit_utils.localized_sound_object
actor_slots_enum        = nanosuit_utils.actor_slots_enum
hit_types_enum          = nanosuit_utils.hit_types_enum

-- ---------------------------------------------------------------------------------------------------------------------
-- Strength mode class
-- ---------------------------------------------------------------------------------------------------------------------

class "power" (nanosuit_mode.abstract_mode)

-- FIXME : Strength mode should also decrease weapon sway
function power:__init(core, name) super(core, name)
    -- Energy related variables
    self.m_energy_use_shoot = 4
    self.m_energy_use_melee = 10
    self.m_energy_use_power_jump = 20

    -- Protection related variables (value is hit power armor can absorb)
    self.m_protection_map[hit_types_enum.strike] = 0.5

    -- Strength related variables
    self.m_wound_power_bonus = 1
    self.m_wound_impulse_bonus = 2000
    self.m_carry_weight_bonus = 25

    -- Cache
    self.m_cache.jump_speed = db.actor:get_actor_jump_speed()
    self.m_cache.wpn_id = nil
    self.m_cache.wpn_dispersion = nil
    self.m_cache.wpn_dispersion_zoom = nil

    -- Sound effects
    self.m_sounds.power_voice = localized_sound_object([[nanosuit\voice\mode_power_voice]])
    self.m_sounds.power_jump = sound_object([[nanosuit\modes\power\mode_power_jump]])
    self.m_sounds.power_on = sound_object([[nanosuit\modes\power\mode_power_on]])
end

function power:apply()
    nanosuit_mode.abstract_mode.apply(self)

    -- Play sounds
    self.m_sounds.power_voice:play_at_pos(db.actor, VEC_ZERO, 0, sound_object.s2d)
    self.m_sounds.power_on:play_at_pos(db.actor, VEC_ZERO, 0, sound_object.s2d)

    -- Register callbacks
    RegisterScriptCallback("actor_on_jump", self)
    RegisterScriptCallback("npc_on_before_hit", self)
    RegisterScriptCallback("actor_on_weapon_fired", self)

    -- Boosters
    self:apply_booster(nanosuit_booster_recoil.recoil, "recoil")

    -- Save jump speed
    self.m_cache.jump_speed = db.actor:get_actor_jump_speed()

    -- Set carry weight
    self:set_carry_capacity("increase")
end

function power:remove()
    nanosuit_mode.abstract_mode.remove(self)

    -- Unregister callbacks
    UnregisterScriptCallback("actor_on_jump", self)
    UnregisterScriptCallback("npc_on_before_hit", self)
    UnregisterScriptCallback("actor_on_weapon_fired", self)

    -- Boosters
    self:remove_booster("recoil")

    -- Reset jump speed
    db.actor:set_actor_jump_speed(self.m_cache.jump_speed)

    -- Reset carry weight
    self:set_carry_capacity("decrease")
end

function power:set_carry_capacity(mode)
    local suit_obj = level.object_by_id(self.m_core.m_suit_id)
    if not suit_obj then
        return
    end

    local max_weight = suit_obj:get_additional_max_weight()
    local max_walk_weight = suit_obj:get_additional_max_walk_weight()

    if mode == "increase" then
        suit_obj:set_additional_max_weight(max_weight + self.m_carry_weight_bonus)
        suit_obj:set_additional_max_walk_weight(max_walk_weight + self.m_carry_weight_bonus)
    elseif mode == "decrease" then
        suit_obj:set_additional_max_weight(max_weight - self.m_carry_weight_bonus)
        suit_obj:set_additional_max_walk_weight(max_walk_weight - self.m_carry_weight_bonus)
    end
end

function power:npc_on_before_hit(npc, scripted_hit, bone_id, flags)
    -- Only apply to actor hits
    if not scripted_hit.draftsman or scripted_hit.draftsman:id() ~= AC_ID then
        return
    end

    -- Only apply to melee hits
    if scripted_hit.type ~= hit.wound then
        return
    end

    -- Use energy
    self.m_core:use_energy(self.m_energy_use_melee)

    -- Calculate new damage
    local power_multiplier = 1 + (self.m_wound_power_bonus * self.m_core.m_energy / 100)
    scripted_hit.power = scripted_hit.power * power_multiplier
    local impulse_multiplier = 1 + (self.m_wound_impulse_bonus * self.m_core.m_energy / 100)
    scripted_hit.impulse = scripted_hit.impulse * impulse_multiplier
end

function power:actor_on_jump()
    -- Play sounds
    if self.m_core.m_energy >= self.m_energy_use_power_jump then
        self.m_sounds.power_jump:play_at_pos(db.actor, VEC_ZERO, 0, sound_object.s2d)
    end

    -- Use energy
    self.m_core:use_energy(self.m_energy_use_power_jump)

    -- Set jump speed (inversely proportional to energy)
    local jump_multiplier = 1 + self.m_core.m_energy / 100
    db.actor:set_actor_jump_speed(self.m_cache.jump_speed * jump_multiplier)
end

function power:actor_on_weapon_fired()
    self.m_core:use_energy(self.m_energy_use_shoot)
end

