---==================================================================================================================---
---                                                                                                                  ---
---    Original Author(s) : NLTP_ASHES                                                                               ---
---    Edited : N/A                                                                                                  ---
---    Date : 08/06/2025                                                                                             ---
---    License : Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International (CC BY-NC-SA 4.0)           ---
---                                                                                                                  ---
---    Script used to define various common functions defined in the scripts of the Nanosuit addon.                  ---
---                                                                                                                  ---
---==================================================================================================================---

-- ---------------------------------------------------------------------------------------------------------------------
-- Constants, global variables and imported functions
-- ---------------------------------------------------------------------------------------------------------------------

-- Variable
debug_mode = true

-- Enum
actor_slots_enum = { knife = 1, pistol = 2, rifle = 3, grenade = 4, binoculars = 5, bolt = 6, outfit = 7, pda = 8, detector = 9, torch = 10, artefact = 11, helmet = 12, backpack = 13, animation = 14 }
hit_types_enum   = { burn = 0, shock = 1, chemical_burn = 2, radiation = 3, telepathic = 4, wound = 5, fire_wound = 6, strike = 7, explosion = 8, wound_2 = 9, light_burn = 10 }
hit_types_names_enum   = { [0] = "burn", [1] = "shock", [2] = "chemical_burn", [3] = "radiation", [4] = "telepathic", [5] = "wound", [6] = "fire_wound", [7] = "strike", [8] = "explosion", [9] = "wound_2", [10] = "light_burn" }
armor_modes_enum = { armor = "armor", power = "power", speed = "speed", cloak = "cloak" }
fire_modes_enum = { single = 1, burst_2 = 2, burst_3 = 3, auto = -1 }
fire_modes_names_enum = { [1] = "single", [2] = "burst_2", [3] = "burst_3", [-1] = "auto" }
actor_cameras_enum = { first_eye = 0, look_at = 1, free_look = 2, fixed_look_at = 3 }

-- ---------------------------------------------------------------------------------------------------------------------
-- Debug Functions
-- ---------------------------------------------------------------------------------------------------------------------

--- Function used to print information into the console/log file only when Nanosuit' debug mode is enabled.
--- @return nil
function dbg_printf(...)
    if debug_mode then
        printf(...)
    end
end

-- ---------------------------------------------------------------------------------------------------------------------
-- Vector functions
-- ---------------------------------------------------------------------------------------------------------------------

--- Function used to get the magnitude of a vector on the XZ plane.
--- @param vec vector
--- @return number
function vec_magnitude_xz(vec)
    local vec_xz = vector():set(vec.x, 0, vec.z)
    return vec_xz:magnitude()
end

--- Function used to calculate the distance between two 2D vectors.
--- @param lhs vector
--- @param rhs vector
--- @return number
function vec2_distance_to(lhs, rhs)
    return math.sqrt((rhs.x - lhs.x)^2 + (rhs.y - lhs.y)^2)
end

-- ---------------------------------------------------------------------------------------------------------------------
-- Color functions
-- ---------------------------------------------------------------------------------------------------------------------

--- Function used to convert a shitty float color value to a ARGB table.
--- @param clr number
--- @return table
function float_to_argb(clr)
    return {
        a = bit.band(bit.rshift(clr, 24), 255),
        r = bit.band(bit.rshift(clr, 16), 255),
        g = bit.band(bit.rshift(clr, 8), 255),
        b = bit.band(clr, 255)
    }
end

-- ---------------------------------------------------------------------------------------------------------------------
-- Sound functions
-- ---------------------------------------------------------------------------------------------------------------------

--- Function used to get a sound object localized to the game's language (if available).
--- Simply define multiple sounds with the same name, and use the language code as a suffix.
--- For example: my_sound / my_sound_rus / my_sound_fra.
--- Then call the function localized_sound_object("my_sound").
--- The sound file without suffix should be the english (or default) version.
--- @param path string
--- @return sound_object
function localized_sound_object(path)
    return sound_object(game.translate_string(path))
end

-- ---------------------------------------------------------------------------------------------------------------------
-- Data functions
-- ---------------------------------------------------------------------------------------------------------------------

--- Function used to pad a string with 0s.
--- The function will add 0s before the number to match the desired length.
--- @param var any
--- @param length number
--- @return string
function string_pad_l(var, char, length)
    local ret = var
    if length then
        while #ret < length do
            ret = char .. ret
        end
    end
    return ret
end

-- ---------------------------------------------------------------------------------------------------------------------
-- Post-process effectors functions
-- ---------------------------------------------------------------------------------------------------------------------

local active_pp_effectors = {}

function add_pp_effector(name, id, looped)
    if has_pp_effector(id) then
        remove_pp_effector(id)
    end
    level.add_pp_effector(name, id, looped)
    active_pp_effectors[id] = { name = name, factor = 1 }
end

function remove_pp_effector(id)
    if has_pp_effector(id) then
        level.remove_pp_effector(id)
        active_pp_effectors[id] = nil
    end
end

function has_pp_effector(id)
    return active_pp_effectors[id] ~= nil
end

function set_pp_effector_factor(id, factor)
    if has_pp_effector(id) then
        level.set_pp_effector_factor(id, factor)
        active_pp_effectors[id].factor = factor
    end
end

function get_pp_effector_factor(id)
    if has_pp_effector(id) then
        return active_pp_effectors[id].factor
    end
    return 0
end

-- ---------------------------------------------------------------------------------------------------------------------
-- Other functions
-- ---------------------------------------------------------------------------------------------------------------------

--- Function used to determine if the object is a legs object.
--- @param obj game_object
--- @return boolean
function is_legs(obj)
    -- FIXME: A better check is needed
    if obj and obj:section() == "outfit_nanosuit_legs" then
        return true
    end
    return false
end

--- Function used to add a unique call (function called every frame) to the level.
--- @param callback function
--- @return function
function add_unique_call(callback, ...)
    local args = {...}
    local wrapper = function()
        if callback(unpack(args)) then
            return true
        end
        return false
    end
    AddUniqueCall(wrapper)
    return wrapper
end

--- Function used to remove a unique call (function called every frame) from the level.
--- @param callback function
--- @return nil
function remove_unique_call(callback)
    RemoveUniqueCall(callback)
end
