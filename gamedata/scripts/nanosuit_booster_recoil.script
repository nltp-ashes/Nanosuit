---==================================================================================================================---
---                                                                                                                  ---
---    Original Author(s) : NLTP_ASHES                                                                               ---
---    Edited : N/A                                                                                                  ---
---    Date : 04/05/2025                                                                                             ---
---    License : Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International (CC BY-NC-SA 4.0)           ---
---                                                                                                                  ---
---    Script used to handle the logic of a recoil lowering booster usable by a Nanosuit mode.                       ---
---                                                                                                                  ---
---==================================================================================================================---

-- ---------------------------------------------------------------------------------------------------------------------
-- Constants, global variables and imported functions
-- ---------------------------------------------------------------------------------------------------------------------

-- Imports
actor_slots_enum        = nanosuit_utils.actor_slots_enum

-- ---------------------------------------------------------------------------------------------------------------------
-- Speed mode class
-- ---------------------------------------------------------------------------------------------------------------------

class "recoil" (nanosuit_booster.abstract_booster)

function recoil:__init(core, name) super(core, name)
    self.m_recoil_factor = 0.1
    self.m_low_energy = core.m_energy <= core.m_energy_low_threshold

    -- Cache
    self.m_cache[actor_slots_enum.knife] = { enabled = true, obj_id = nil, dispersion = nil, dispersion_zoom = nil }
    self.m_cache[actor_slots_enum.pistol] = { enabled = true, obj_id = nil, dispersion = nil, dispersion_zoom = nil }
    self.m_cache[actor_slots_enum.rifle] = { enabled = true, obj_id = nil, dispersion = nil, dispersion_zoom = nil }
end

function recoil:apply()
    nanosuit_booster.abstract_booster.apply(self)

    RegisterScriptCallback("actor_on_update", self)
end

function recoil:remove()
    UnregisterScriptCallback("actor_on_update", self)

    nanosuit_booster.abstract_booster.remove(self)
end

function recoil:filter(obj, slot)
    if not nanosuit_booster.abstract_booster.filter(self, obj, slot) then
        return false
    end
    return IsWeapon(obj) and obj:cast_Weapon()
end

function recoil:set(obj, slot)
    if not self.m_low_energy then
        nanosuit_booster.abstract_booster.set(self, obj, slot)

        local wpn_obj = obj:cast_Weapon()

        self.m_cache[slot].dispersion = wpn_obj:GetCamDispersion()
        self.m_cache[slot].dispersion_zoom = wpn_obj:GetZoomCamDispersion()

        wpn_obj:SetCamDispersion(self.m_cache[slot].dispersion * self.m_recoil_factor)
        wpn_obj:SetZoomCamDispersion(self.m_cache[slot].dispersion_zoom * self.m_recoil_factor)
    end
end

function recoil:unset(obj, slot)
    if not self.m_low_energy then
        local wpn_obj = obj:cast_Weapon()

        wpn_obj:SetCamDispersion(self.m_cache[slot].dispersion)
        wpn_obj:SetZoomCamDispersion(self.m_cache[slot].dispersion_zoom)

        self.m_cache[slot].dispersion = nil
        self.m_cache[slot].dispersion_zoom = nil

        nanosuit_booster.abstract_booster.unset(self, obj, slot)
    end
end

function recoil:actor_on_update()
    local has_enough_energy = self.m_core.m_energy >= self.m_core.m_energy_low_threshold

    local should_set = has_enough_energy and self.m_low_energy
    local should_unset = not has_enough_energy and not self.m_low_energy

    if should_set then
        self.m_low_energy = false
    end

    for slot, _ in pairs(self.m_cache) do
        local item_in_slot = db.actor:item_in_slot(slot)
        if item_in_slot and self:filter(item_in_slot, slot) then
            if should_set then
                self:set(item_in_slot, slot)
            elseif should_unset then
                self:unset(item_in_slot, slot)
            end
        end
    end

    if should_unset then
        self.m_low_energy = true
    end
end