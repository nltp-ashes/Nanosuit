---==================================================================================================================---
---                                                                                                                  ---
---    Original Author(s) : NLTP_ASHES                                                                               ---
---    Edited : N/A                                                                                                  ---
---    Date : 14/06/2025                                                                                             ---
---    License : Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International (CC BY-NC-SA 4.0)           ---
---                                                                                                                  ---
---    Script used to handle the core logic of the Nanosuit addon.                                                   ---
---                                                                                                                  ---
---==================================================================================================================---

-- ---------------------------------------------------------------------------------------------------------------------
-- Constants, global variables and imported functions
-- ---------------------------------------------------------------------------------------------------------------------

-- Imports
localized_sound_object  = nanosuit_utils.localized_sound_object
actor_slots_enum        = nanosuit_utils.actor_slots_enum
armor_modes_enum        = nanosuit_utils.armor_modes_enum

-- Singleton
instance                = nil

-- ---------------------------------------------------------------------------------------------------------------------
-- General functions
-- ---------------------------------------------------------------------------------------------------------------------

function actor_item_to_slot(_)
    nextTick(function()
        local outfit = db.actor:item_in_slot(actor_slots_enum.outfit)
        if outfit ~= nil and outfit:section() == "outfit_nanosuit" and instance == nil then
            if instance == nil then
                printf("Nanosuit core initializing")
                instance = core()
            end
        end
        return true
    end)
end

function actor_item_to_ruck(_)
    nextTick(function()
        local outfit = db.actor:item_in_slot(actor_slots_enum.outfit)
        if (outfit == nil or outfit:section() ~= "outfit_nanosuit") and instance ~= nil then
            instance:destroy()
            instance = nil
            printf("Nanosuit core destroyed")
        end
        return true
    end)
end

function actor_on_item_drop(_)
    nextTick(function()
        local outfit = db.actor:item_in_slot(actor_slots_enum.outfit)
        if (outfit == nil or outfit:section() ~= "outfit_nanosuit") and instance ~= nil then
            instance:destroy()
            instance = nil
            printf("Nanosuit core destroyed")
        end
        return true
    end)
end

function actor_on_net_destroy()
    if instance ~= nil then
        instance:destroy()
        instance = nil
        printf("Nanosuit core destroyed")
    end
end

-- ---------------------------------------------------------------------------------------------------------------------
-- Callbacks registration
-- ---------------------------------------------------------------------------------------------------------------------

--- Function used to register callbacks.
--- @return nil
function on_game_start()
    RegisterScriptCallback("actor_item_to_slot", actor_item_to_slot)
    RegisterScriptCallback("actor_item_to_ruck", actor_item_to_ruck)
    RegisterScriptCallback("actor_on_item_drop", actor_on_item_drop)
    RegisterScriptCallback("actor_on_net_destroy", actor_on_net_destroy)
end

-- ---------------------------------------------------------------------------------------------------------------------
-- Core class
-- ---------------------------------------------------------------------------------------------------------------------

class "core"

function core:__init()
    -- Energy related variables
    self.m_energy = 100
    self.m_energy_regen_rate = 100
    self.m_energy_regen_delay = 5000
    self.m_energy_last_use = 0
    self.m_energy_last_regen = 0
    self.m_energy_low_threshold = 20
    self.m_energy_low_voiced = true
    self.m_energy_very_low_threshold = 10
    self.m_energy_very_low_voiced = true
    self.m_energy_off_threshold = 0
    self.m_energy_off_voiced = true
    self.m_energy_on_threshold = 0
    self.m_energy_on_voiced = true

    -- Sound effects
    self.m_sounds = {
        energy_low_voice = localized_sound_object([[nanosuit\voice\energy_low_voice]]),
        energy_very_low = sound_object([[nanosuit\energy\energy_very_low]]),
        energy_on = sound_object([[nanosuit\energy\energy_on]]),
        energy_off = sound_object([[nanosuit\energy\energy_off]])
    }

    -- Armor modes
    self.m_modes = {
        [armor_modes_enum.armor] = nanosuit_mode_armor[armor_modes_enum.armor](self, armor_modes_enum.armor),
        [armor_modes_enum.power] = nanosuit_mode_power[armor_modes_enum.power](self, armor_modes_enum.power),
        [armor_modes_enum.speed] = nanosuit_mode_speed[armor_modes_enum.speed](self, armor_modes_enum.speed),
        [armor_modes_enum.cloak] = nanosuit_mode_cloak[armor_modes_enum.cloak](self, armor_modes_enum.cloak)
    }

    -- Default mode initialization
    self.m_default_mode = armor_modes_enum.armor
    self.m_current_mode = self.m_modes[self.m_default_mode]
    self.m_current_mode:apply()

    -- UIs
    self.m_hud = nanosuit_ui_hud.ui_hud(self)

    -- Others
    self.m_vaporizer = nanosuit_vaporizer.vaporizer()

    -- Register callbacks
    RegisterScriptCallback("actor_on_death", self)
    RegisterScriptCallback("actor_on_update", self)
    RegisterScriptCallback("on_option_change", self)
end

function core:destroy()
    self.m_current_mode:remove()

    UnregisterScriptCallback("actor_on_death", self)
    UnregisterScriptCallback("actor_on_update", self)
    UnregisterScriptCallback("on_option_change", self)

    self.m_modes = {
        [armor_modes_enum.armor] = nil,
        [armor_modes_enum.power] = nil,
        [armor_modes_enum.speed] = nil,
        [armor_modes_enum.cloak] = nil
    }

    self.m_hud:destroy()
end

function core:use_energy(amount)
    self.m_energy = clamp(self.m_energy - amount, 0, 100)
    self.m_energy_last_use = time_global()
end

function core:change_mode(mode)
    if self.m_current_mode ~= self.m_modes[mode] then
        self.m_current_mode:remove()
        self.m_current_mode = self.m_modes[mode]
        self.m_current_mode:apply()
    end
end

function core:on_option_change()
    -- Restart HUD
    self.m_hud:destroy()
    self.m_hud = nanosuit_ui_hud.ui_hud(self)
end

function core:actor_on_death()
    for _, sfx in pairs(self.m_sounds) do
        if sfx:playing() then
            sfx:stop()
        end
    end
end

function core:actor_on_update()
    -- Delay energy regen 5s after last energy use
    if time_global() - self.m_energy_last_use > self.m_energy_regen_delay then
        -- Throttle energy regen once every 100ms
        if time_global() - self.m_energy_last_regen > self.m_energy_regen_rate then
            self.m_energy = clamp(self.m_energy + 1, 0, 100)
            self.m_energy_last_regen = time_global()
        end
    end

    -- Energy low voice
    if self.m_energy <= self.m_energy_low_threshold and not self.m_energy_low_voiced then
        self.m_sounds.energy_low_voice:play_at_pos(db.actor, VEC_ZERO, 0, sound_object.s2d)
        self.m_energy_low_voiced = true
    end
    if self.m_energy > self.m_energy_low_threshold and self.m_energy_low_voiced then
        self.m_sounds.energy_low_voice:stop()
        self.m_energy_low_voiced = false
    end

    -- Energy very low
    if self.m_energy <= self.m_energy_very_low_threshold and not self.m_energy_very_low_voiced then
        self.m_sounds.energy_very_low:play_at_pos(db.actor, VEC_ZERO, 0, sound_object.s2d + sound_object.looped)
        self.m_energy_very_low_voiced = true
    end
    if self.m_energy > self.m_energy_very_low_threshold and self.m_energy_very_low_voiced then
        self.m_sounds.energy_very_low:stop()
        self.m_energy_very_low_voiced = false
    end

    -- Energy off
    if self.m_energy <= self.m_energy_off_threshold and not self.m_energy_off_voiced then
        self.m_sounds.energy_off:play_at_pos(db.actor, VEC_ZERO, 0, sound_object.s2d)
        self.m_energy_off_voiced = true
    end
    if self.m_energy > self.m_energy_off_threshold and self.m_energy_off_voiced then
        self.m_sounds.energy_off:stop()
        self.m_energy_off_voiced = false
    end

    -- Energy on
    if self.m_energy > self.m_energy_on_threshold and not self.m_energy_on_voiced then
        self.m_sounds.energy_on:play_at_pos(db.actor, VEC_ZERO, 0, sound_object.s2d)
        self.m_energy_on_voiced = true
    end
    if self.m_energy <= self.m_energy_on_threshold and self.m_energy_on_voiced then
        self.m_sounds.energy_on:stop()
        self.m_energy_on_voiced = false
    end
end
