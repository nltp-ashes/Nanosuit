---==================================================================================================================---
---                                                                                                                  ---
---    Original Author(s) : NLTP_ASHES                                                                               ---
---    Edited : N/A                                                                                                  ---
---    Date : 30/03/2025                                                                                             ---
---    License : Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International (CC BY-NC-SA 4.0)           ---
---                                                                                                                  ---
---    Script used to handle the logic of speed mode of the Nanosuit addon.                                          ---
---                                                                                                                  ---
---==================================================================================================================---

-- ---------------------------------------------------------------------------------------------------------------------
-- Constants, global variables and imported functions
-- ---------------------------------------------------------------------------------------------------------------------

-- ---------------------------------------------------------------------------------------------------------------------
-- Speed mode class
-- ---------------------------------------------------------------------------------------------------------------------

class "speed"

function speed:__init(core)
    self.m_core = core
    self.m_sprint_energy_use = 1
    self.m_sprint_energy_last_use = 0
    self.m_sprint_energy_rate = 50
    self.m_sprint_energy_low_rate = 250
    self.m_saved_run_coef = db.actor:get_actor_run_coef()
    self.m_saved_sprint_coef = db.actor:get_actor_sprint_koef()
    self.m_sounds = {
        speed_voice = sound_object([[nanosuit\mode_speed_voice]]),
        speed_on = sound_object([[nanosuit\mode_speed_on]]),
        speed_loop = sound_object([[nanosuit\mode_speed_loop]]),
        speed_stop = sound_object([[nanosuit\mode_speed_stop]])
    }
end

function speed:apply_effects()
    -- Play sounds
    self.m_sounds.speed_voice:play_at_pos(db.actor, VEC_ZERO, 0, sound_object.s2d)
    self.m_sounds.speed_on:play_at_pos(db.actor, VEC_ZERO, 0, sound_object.s2d)

    -- Register callbacks
    RegisterScriptCallback("actor_on_update", self)

    -- Set run and sprint coefficients
    self.m_saved_run_coef = db.actor:get_actor_run_coef()
    self.m_saved_sprint_coef = db.actor:get_actor_sprint_koef()
end

function speed:remove_effects()
    -- Unregister callbacks
    UnregisterScriptCallback("actor_on_update", self)

    -- Reset run and sprint coefficients
    db.actor:set_actor_run_coef(self.m_saved_run_coef)
    db.actor:set_actor_sprint_koef(self.m_saved_sprint_coef)
end

function speed:actor_on_update()
    local has_enough_energy = self.m_core.m_energy >= self.m_core.m_energy_very_low_threshold

    -- Use energy
    local energy_rate = has_enough_energy and self.m_sprint_energy_rate or self.m_sprint_energy_low_rate
    if IsMoveState("mcSprint") and time_global() - self.m_sprint_energy_last_use > energy_rate then
        self.m_core:use_energy(self.m_sprint_energy_use)
        self.m_sprint_energy_last_use = time_global()
    end

    -- Play sounds
    if has_enough_energy and IsMoveState("mcSprint") and not self.m_sounds.speed_loop:playing() then
        self.m_sounds.speed_stop:stop()
        self.m_sounds.speed_loop:play_at_pos(db.actor, VEC_ZERO, 0, sound_object.s2d + sound_object.looped)
    elseif has_enough_energy and not IsMoveState("mcSprint") and self.m_sounds.speed_loop:playing() then
        self.m_sounds.speed_loop:stop()
        self.m_sounds.speed_stop:play_at_pos(db.actor, VEC_ZERO, 0, sound_object.s2d)
    elseif not has_enough_energy and self.m_sounds.speed_loop:playing() then
        self.m_sounds.speed_loop:stop()
        self.m_sounds.speed_stop:play_at_pos(db.actor, VEC_ZERO, 0, sound_object.s2d)
    end

    -- Set run and sprint coefficients
    if has_enough_energy then
        db.actor:set_actor_run_coef(self.m_saved_run_coef * 1.5)
        db.actor:set_actor_sprint_koef(self.m_saved_sprint_coef * 1.25)
    else
        db.actor:set_actor_run_coef(self.m_saved_run_coef)
        db.actor:set_actor_sprint_koef(self.m_saved_sprint_coef)
    end
end
