---==================================================================================================================---
---                                                                                                                  ---
---    Original Author(s) : NLTP_ASHES                                                                               ---
---    Edited : N/A                                                                                                  ---
---    Date : 25/11/2023                                                                                             ---
---    License : Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International (CC BY-NC-SA 4.0)           ---
---                                                                                                                  ---
---    Script used to handle the core logic of the Nanosuit addon.                                                   ---
---                                                                                                                  ---
---==================================================================================================================---

-- ---------------------------------------------------------------------------------------------------------------------
-- Constants, global variables and imported functions
-- ---------------------------------------------------------------------------------------------------------------------

-- ---------------------------------------------------------------------------------------------------------------------
-- Cloak mode class
-- ---------------------------------------------------------------------------------------------------------------------

class "cloak"

function cloak:__init()
    self.cloak_shader = [[models\pautina]]
    self.saved_actor_shaders = {}
    self.saved_item_shaders = {}
end

function cloak:apply_effects()
    printf("[NS] Cloak Mode | Shaders table :\n%s", utils_data.print_table(db.actor:get_shaders(), false, true))
    --self.saved_actor_shaders = db.actor:get_shaders()
    --for idx,_ in pairs(self.saved_actor_shaders) do
    --    db.actor:set_shader(idx, self.cloak_shader, nil, true)
    --end
    --
    --local active_item = db.actor:active_item()
    --if active_item then
    --    printf("[NS] Cloak Mode | Shaders table :\n%s", utils_data.print_table(active_item:get_shaders(), false, true))
    --    self.saved_item_shaders = active_item:get_shaders()
    --    for idx,_ in pairs(self.saved_item_shaders) do
    --        active_item:set_shader(idx, self.cloak_shader, nil, true)
    --    end
    --end
    --
    --local active_detector = db.actor:active_detector()
    --if active_detector then
    --    printf("[NS] Cloak Mode | Shaders table :\n%s", utils_data.print_table(active_detector:get_shaders(), false, true))
    --    self.saved_item_shaders = active_detector:get_shaders()
    --    for idx,_ in pairs(self.saved_item_shaders) do
    --        active_detector:set_shader(idx, self.cloak_shader, nil, true)
    --    end
    --end

    db.actor:set_shader(-1, self.cloak_shader, nil, true)

    local active_item = db.actor:active_item()
    if active_item then
        active_item:set_shader(-1, self.cloak_shader, nil, true)
    end

    local active_detector = db.actor:active_detector()
    if active_detector then
        active_detector:set_shader(-1, self.cloak_shader, nil, true)
    end
end

function cloak:remove_effects()
    printf("[NS] Cloak Mode | Shaders table :\n%s", utils_data.print_table(db.actor:get_shaders(), false, true))

    for idx,save in pairs(self.saved_actor_shaders) do
        db.actor:set_shader(idx, save.shader, nil, true)
    end

    local active_item = db.actor:active_item()
    if active_item then
        for idx,save in pairs(self.saved_item_shaders) do
            active_item:set_shader(idx, save.shader, nil, true)
        end
    end

    local active_detector = db.actor:active_detector()
    if active_detector then
        for idx,save in pairs(self.saved_item_shaders) do
            active_detector:set_shader(idx, save.shader, nil, true)
        end
    end
end

-- ---------------------------------------------------------------------------------------------------------------------
-- Callbacks registration
-- ---------------------------------------------------------------------------------------------------------------------

--- Function used to register callbacks.
--- @return nil
function on_game_start()
end