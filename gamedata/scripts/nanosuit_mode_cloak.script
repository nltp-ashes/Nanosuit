---==================================================================================================================---
---                                                                                                                  ---
---    Original Author(s) : NLTP_ASHES                                                                               ---
---    Edited : N/A                                                                                                  ---
---    Date : 27/04/2025                                                                                             ---
---    License : Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International (CC BY-NC-SA 4.0)           ---
---                                                                                                                  ---
---    Script used to handle the logic of cloak mode of the Nanosuit addon.                                          ---
---                                                                                                                  ---
---==================================================================================================================---

-- ---------------------------------------------------------------------------------------------------------------------
-- Constants, global variables and imported functions
-- ---------------------------------------------------------------------------------------------------------------------

-- Imports
armor_modes_enum        = nanosuit_utils.armor_modes_enum
actor_slots_enum        = nanosuit_utils.actor_slots_enum

-- ---------------------------------------------------------------------------------------------------------------------
-- Cloak mode class
-- ---------------------------------------------------------------------------------------------------------------------

class "cloak" (nanosuit_mode.abstract_mode)

function cloak:__init(core, name) super(core, name)
    -- Energy related variables
    self.m_energy_use_min = 0.1
    self.m_energy_use_max = 1
    self.m_energy_last_use = 0
    self.m_energy_rate = 100

    -- Cloak related variables
    self.m_cloak_npc_see_distance = 5
    self.m_cloak_texture = [[nanosuit\cloak_pattern]]
    self.m_cloak_shader = [[models\xanomaly]] --[[models\window]] --[[models\pautina]]

    -- Cache
    self.m_cache.visibility_functor = nil
    self.m_cache.legs_shaders = { world = nil }
    self.m_cache.actor_shaders = { hud = nil, world = nil }
    self.m_cache.items_shaders = {
        [actor_slots_enum.knife] = { id = nil, hud = nil, world = nil },
        [actor_slots_enum.pistol] = { id = nil, hud = nil, world = nil },
        [actor_slots_enum.rifle] = { id = nil, hud = nil, world = nil },
        [actor_slots_enum.grenade] = { id = nil, hud = nil, world = nil },
        [actor_slots_enum.binoculars] = { id = nil, hud = nil, world = nil },
        [actor_slots_enum.bolt] = { id = nil, hud = nil, world = nil },
        [actor_slots_enum.pda] = { id = nil, hud = nil, world = nil },
        [actor_slots_enum.detector] = { id = nil, hud = nil, world = nil },
        [actor_slots_enum.torch] = { id = nil, hud = nil, world = nil },
        [actor_slots_enum.animation] = { id = nil, hud = nil, world = nil }
    }

    -- Sound effects
    self.m_sounds.cloak_voice = sound_object([[nanosuit\mode_cloak_voice]])
    self.m_sounds.cloak_loop = sound_object([[nanosuit\mode_cloak_loop]])
    self.m_sounds.cloak_shoot = sound_object([[nanosuit\mode_cloak_shoot]])
    self.m_sounds.cloak_on = sound_object([[nanosuit\mode_cloak_on]])
    self.m_sounds.cloak_off = sound_object([[nanosuit\mode_cloak_off]])

    -- Prefetch textures
    game.prefetch_texture(self.m_cloak_texture .. ".dds")
end

function cloak:apply_effects()
    -- Play sounds
    self.m_sounds.cloak_voice:play_at_pos(db.actor, VEC_ZERO, 0, sound_object.s2d)
    self.m_sounds.cloak_on:play_at_pos(db.actor, VEC_ZERO, 0, sound_object.s2d)
    self.m_sounds.cloak_loop:play_at_pos(db.actor, VEC_ZERO, 0, sound_object.s2d + sound_object.looped)

    -- Register callbacks
    RegisterScriptCallback("actor_on_update", self)
    RegisterScriptCallback("actor_item_to_slot", self)
    RegisterScriptCallback("actor_item_to_ruck", self)
    RegisterScriptCallback("actor_on_item_drop", self)
    RegisterScriptCallback("actor_on_weapon_fired", self)
    RegisterScriptCallback("game_object_on_net_spawn", self)
    RegisterScriptCallback("game_object_on_net_destroy", self)

    -- Override visibility from NPCs
    self.m_cache.visibility_functor = visual_memory_manager.get_visible_value
    visual_memory_manager.get_visible_value = function(...) return self:get_visible_value(...) end

    -- Set player invisible
    self:set_actor_invisible()

    -- Set items invisible
    for slot,_ in pairs(self.m_cache.items_shaders) do
        local obj = db.actor:item_in_slot(slot)
        if obj then
            self:set_item_invisible(obj, slot)
        end
    end

    -- Set legs invisible
    if se_legs then
        local legs_id = se_legs.LegsTbl[level.name()]
        local legs_obj = legs_id and level.object_by_id(legs_id)
        if legs_obj then
            self:set_legs_invisible(legs_obj)
        end
    end
end

function cloak:remove_effects()
    -- Play sounds
    self.m_sounds.cloak_off:play_at_pos(db.actor, VEC_ZERO, 0, sound_object.s2d)
    self.m_sounds.cloak_loop:stop()

    -- Unregister callbacks
    UnregisterScriptCallback("actor_on_update", self)
    UnregisterScriptCallback("actor_item_to_slot", self)
    UnregisterScriptCallback("actor_item_to_ruck", self)
    UnregisterScriptCallback("actor_on_item_drop", self)
    UnregisterScriptCallback("actor_on_weapon_fired", self)
    UnregisterScriptCallback("game_object_on_net_spawn", self)
    UnregisterScriptCallback("game_object_on_net_destroy", self)

    -- Restore visibility from NPCs
    visual_memory_manager.get_visible_value = self.m_cache.visibility_functor

    -- Restore player visibility
    self:set_actor_visible()

    -- Restore items visibility
    for slot,data in pairs(self.m_cache.items_shaders) do
        local obj = db.actor:item_in_slot(slot)
        if obj and data.id == obj:id() then
            self:set_item_visible(obj, slot)
        end
    end

    -- Restore legs visibility
    if se_legs then
        local legs_id = se_legs.LegsTbl[level.name()]
        local legs_obj = legs_id and level.object_by_id(legs_id)
        if legs_obj then
            self:set_legs_visible(legs_obj)
        end
    end
end

-- FIXME : This fails if the NPC sees the actor before the cloak is applied, right now you need to break vision for this to take effect
function cloak:get_visible_value(npc, who, time_delta, time_quant, luminosity, velocity_factor, velocity, distance, object_distance, always_visible_distance)
    local original_value = self.m_cache.visibility_functor(npc, who, time_delta, time_quant, luminosity, velocity_factor, velocity, distance, object_distance, always_visible_distance)

    if not npc or not who or who:id() ~= AC_ID then
        return original_value
    end

    if object_distance > self.m_cloak_npc_see_distance then
        return 0
    end

    local distance_factor = 1 - (object_distance / self.m_cloak_npc_see_distance)

    return original_value * distance_factor
end

function cloak:set_actor_visible()
    for idx,save in pairs(self.m_cache.actor_shaders.hud) do
        db.actor:set_shader(idx, save.shader, save.texture, true)
    end
    for idx,save in pairs(self.m_cache.actor_shaders.world) do
        db.actor:set_shader(idx, save.shader, save.texture)
    end
    self.m_cache.actor_shaders = { hud = nil, world = nil }
end

function cloak:set_actor_invisible()
    self.m_cache.actor_shaders = { hud = db.actor:get_shaders(true), world = db.actor:get_shaders() }
    for idx,_ in pairs(self.m_cache.actor_shaders.hud) do
        db.actor:set_shader(idx, self.m_cloak_shader, self.m_cloak_texture, true)
    end
    for idx,_ in pairs(self.m_cache.actor_shaders.world) do
        db.actor:set_shader(idx, self.m_cloak_shader, self.m_cloak_texture)
    end
end

function cloak:set_item_visible(obj, slot)
    for idx,save in pairs(self.m_cache.items_shaders[slot].hud) do
        obj:set_shader(idx, save.shader, save.texture, true)
    end
    for idx,save in pairs(self.m_cache.items_shaders[slot].world) do
        obj:set_shader(idx, save.shader, save.texture)
    end
    self.m_cache.items_shaders[slot] = { id = nil, hud = nil, world = nil }
end

function cloak:set_item_invisible(obj, slot)
    self.m_cache.items_shaders[slot] = { id = obj:id(), hud = obj:get_shaders(true), world = obj:get_shaders() }
    for idx,_ in pairs(self.m_cache.items_shaders[slot].hud) do
        obj:set_shader(idx, self.m_cloak_shader, self.m_cloak_texture, true)
    end
    for idx,_ in pairs(self.m_cache.items_shaders[slot].world) do
        obj:set_shader(idx, self.m_cloak_shader, self.m_cloak_texture)
    end
end

function cloak:set_legs_visible(legs_obj)
    for idx,save in pairs(self.m_cache.legs_shaders.world) do
        legs_obj:set_shader(idx, save.shader, save.texture)
    end
    self.m_cache.legs_shaders = { world = nil }
end

function cloak:set_legs_invisible(legs_obj)
    self.m_cache.legs_shaders = { world = legs_obj:get_shaders() }
    for idx,_ in pairs(self.m_cache.legs_shaders.world) do
        legs_obj:set_shader(idx, self.m_cloak_shader, self.m_cloak_texture)
    end
end

function cloak:game_object_on_net_spawn(obj)
    if se_legs and obj:section() == "outfit_nanosuit_legs" then
        CreateTimeEvent("nanosuit_legs_spawn", obj:name(), 0, function(id)
            local obj_now = level.object_by_id(id)
            if obj_now then
                self:set_legs_invisible(obj_now)
            end
            return true
        end, obj:id())
    end
end

function cloak:game_object_on_net_destroy(obj)
    if se_legs and obj:section() == "outfit_nanosuit_legs" then
        self:set_legs_visible(obj)
    end
end

function cloak:actor_on_update()
    -- Switch to armor mode when out of energy
    if self.m_core.m_energy <= 0 then
        self.m_core:change_mode(self.m_core.m_default_mode)
        return
    end

    -- Cloak energy use
    if time_global() - self.m_energy_last_use > self.m_energy_rate then
        local movement = db.actor:get_movement_speed()
        local speed_mps = nanosuit_utils.vec_magnitude_xz(movement)
        local energy_use = self.m_energy_use_min + normalize(speed_mps, 0, 6) * self.m_energy_use_max

        self.m_core:use_energy(energy_use)
        self.m_energy_last_use = time_global()
    end
end

function cloak:actor_on_weapon_fired()
    self.m_sounds.cloak_shoot:play_at_pos(db.actor, VEC_ZERO, 0, sound_object.s2d)
    self.m_core:use_energy(100)
    self.m_core:change_mode(self.m_core.m_default_mode)
end

function cloak:actor_item_to_slot(obj)
    for slot,_ in pairs(self.m_cache.items_shaders) do
        local obj_in_slot = db.actor:item_in_slot(slot)
        if obj_in_slot and obj_in_slot:id() == obj:id() then
            self:set_item_invisible(obj, slot)
        end
    end
end

function cloak:actor_item_to_ruck(obj)
    for slot,data in pairs(self.m_cache.items_shaders) do
        if data.id == obj:id() then
            self:set_item_visible(obj, slot)
        end
    end
end

function cloak:actor_on_item_drop(obj)
    for slot,data in pairs(self.m_cache.items_shaders) do
        if data.id == obj:id() then
            self:set_item_visible(obj, slot)
        end
    end
end