---==================================================================================================================---
---                                                                                                                  ---
---    Original Author(s) : NLTP_ASHES                                                                               ---
---    Edited : N/A                                                                                                  ---
---    Date : 30/03/2025                                                                                             ---
---    License : Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International (CC BY-NC-SA 4.0)           ---
---                                                                                                                  ---
---    Script used to handle the logic of cloak mode of the Nanosuit addon.                                          ---
---                                                                                                                  ---
---==================================================================================================================---

-- ---------------------------------------------------------------------------------------------------------------------
-- Constants, global variables and imported functions
-- ---------------------------------------------------------------------------------------------------------------------

-- Imports
armor_modes_enum        = nanosuit_core.armor_modes_enum
actor_slots             = nanosuit_utils.actor_slots

-- ---------------------------------------------------------------------------------------------------------------------
-- Cloak mode class
-- ---------------------------------------------------------------------------------------------------------------------

class "cloak" (nanosuit_mode.abstract_mode)

function cloak:__init(core, name) super(core, name)
    -- Energy related variables
    self.m_energy_use_min = 0.1
    self.m_energy_use_max = 1
    self.m_energy_last_use = 0
    self.m_energy_rate = 100

    -- Cloak slots
    self.m_cloaked_slots = {
        [actor_slots.knife] = true,
        [actor_slots.pistol] = true,
        [actor_slots.rifle] = true,
        [actor_slots.grenade] = true,
        [actor_slots.binoculars] = true,
        [actor_slots.pda] = true,
        [actor_slots.detector] = true,
        [actor_slots.torch] = true
    }

    -- Cloak related variables
    self.m_cloak_texture = [[nanosuit\cloak_pattern]]
    self.m_cloak_shader = [[models\window]] --[[models\xanomaly]] --[[models\pautina]]


    -- Cache
    self.m_cache["actor_shaders"] = {}
    self.m_cache["items_shaders"] = {}

    -- Sound effects
    self.m_sounds["cloak_voice"] = sound_object([[nanosuit\mode_cloak_voice]])
    self.m_sounds["cloak_loop"] = sound_object([[nanosuit\mode_cloak_loop]])
    self.m_sounds["cloak_shoot"] = sound_object([[nanosuit\mode_cloak_shoot]])
    self.m_sounds["cloak_on"] = sound_object([[nanosuit\mode_cloak_on]])
    self.m_sounds["cloak_off"] = sound_object([[nanosuit\mode_cloak_off]])
end

function cloak:apply_effects()
    -- Play sounds
    self.m_sounds.cloak_voice:play_at_pos(db.actor, VEC_ZERO, 0, sound_object.s2d)
    self.m_sounds.cloak_on:play_at_pos(db.actor, VEC_ZERO, 0, sound_object.s2d)
    self.m_sounds.cloak_loop:play_at_pos(db.actor, VEC_ZERO, 0, sound_object.s2d + sound_object.looped)

    -- Register callbacks
    RegisterScriptCallback("actor_on_update", self)
    RegisterScriptCallback("actor_on_weapon_fired", self)

    -- Set player invisible
    self.m_cache["actor_shaders"] = db.actor:get_shaders(true)
    db.actor:set_shader(-1, self.m_cloak_shader, self.m_cloak_texture, true)

    -- FIXME : This only works if actor does not change active item/detector while cloak mode is active
    local active_item = db.actor:active_item()
    if active_item then
        self.m_saved_item_shaders = active_item:get_shaders(true)
        active_item:set_shader(-1, self.m_cloak_shader, self.m_cloak_texture, true)
    end

    -- FIXME : This only works if actor does not change active item/detector while cloak mode is active
    local active_detector = db.actor:active_detector()
    if active_detector then
        self.m_saved_item_shaders = active_detector:get_shaders(true)
        active_detector:set_shader(-1, self.m_cloak_shader, self.m_cloak_texture, true)
    end
end

function cloak:remove_effects()
    -- Play sounds
    self.m_sounds.cloak_off:play_at_pos(db.actor, VEC_ZERO, 0, sound_object.s2d)
    self.m_sounds.cloak_loop:stop()

    -- Unregister callbacks
    UnregisterScriptCallback("actor_on_update", self)
    UnregisterScriptCallback("actor_on_weapon_fired", self)

    -- Restore player visibility
    for idx,save in pairs(self.m_cache["actor_shaders"]) do
        db.actor:set_shader(idx, save.shader, save.texture, true)
    end

    -- FIXME : This only works if actor does not change active item/detector while cloak mode is active
    local active_item = db.actor:active_item()
    if active_item then
        for idx,save in pairs(self.m_saved_item_shaders) do
            active_item:set_shader(idx, save.shader, save.texture, true)
        end
    end

    -- FIXME : This only works if actor does not change active item/detector while cloak mode is active
    local active_detector = db.actor:active_detector()
    if active_detector then
        for idx,save in pairs(self.m_saved_item_shaders) do
            active_detector:set_shader(idx, save.shader, save.texture, true)
        end
    end
end

function cloak:actor_on_update()
    -- Switch to armor mode when out of energy
    if self.m_core.m_energy <= 0 then
        self.m_core:change_mode(armor_modes_enum.armor)
        return
    end

    -- Cloak energy use
    if time_global() - self.m_energy_last_use > self.m_energy_rate then
        local movement = db.actor:get_movement_speed()
        local speed_mps = nanosuit_utils.vec_magnitude_xz(movement)
        local energy_use = self.m_energy_use_min + normalize(speed_mps, 0, 6) * self.m_energy_use_max

        self.m_core:use_energy(energy_use)
        self.m_energy_last_use = time_global()
    end
end

function cloak:actor_on_weapon_fired()
    self.m_sounds.cloak_shoot:play_at_pos(db.actor, VEC_ZERO, 0, sound_object.s2d)
    self.m_core:use_energy(100)
    self.m_core:change_mode(armor_modes_enum.armor)
end