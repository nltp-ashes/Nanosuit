---==================================================================================================================---
---                                                                                                                  ---
---    Original Author(s) : NLTP_ASHES                                                                               ---
---    Edited : N/A                                                                                                  ---
---    Date : 20/04/2025                                                                                             ---
---    License : Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International (CC BY-NC-SA 4.0)           ---
---                                                                                                                  ---
---    Script used to handle the logic of cloak mode of the Nanosuit addon.                                          ---
---                                                                                                                  ---
---==================================================================================================================---

-- ---------------------------------------------------------------------------------------------------------------------
-- Constants, global variables and imported functions
-- ---------------------------------------------------------------------------------------------------------------------

-- Imports
armor_modes_enum        = nanosuit_core.armor_modes_enum
actor_slots             = nanosuit_utils.actor_slots

-- ---------------------------------------------------------------------------------------------------------------------
-- Cloak mode class
-- ---------------------------------------------------------------------------------------------------------------------

class "cloak" (nanosuit_mode.abstract_mode)

function cloak:__init(core, name) super(core, name)
    -- Energy related variables
    self.m_energy_use_min = 0.1
    self.m_energy_use_max = 1
    self.m_energy_last_use = 0
    self.m_energy_rate = 100

    -- Cloak related variables
    self.m_cloak_npc_see_distance = 5
    self.m_cloak_texture = [[nanosuit\cloak_pattern]]
    self.m_cloak_shader = [[models\xanomaly]] --[[models\window]] --[[models\pautina]]

    -- Cache
    self.m_cache["actor_shaders"] = {}
    self.m_cache["items_shaders"] = {
        [actor_slots.knife] = { id = nil, shaders = nil },
        [actor_slots.pistol] = { id = nil, shaders = nil },
        [actor_slots.rifle] = { id = nil, shaders = nil },
        [actor_slots.grenade] = { id = nil, shaders = nil },
        [actor_slots.binoculars] = { id = nil, shaders = nil },
        [actor_slots.bolt] = { id = nil, shaders = nil },
        [actor_slots.pda] = { id = nil, shaders = nil },
        [actor_slots.detector] = { id = nil, shaders = nil },
        [actor_slots.torch] = { id = nil, shaders = nil },
        [actor_slots.animation] = { id = nil, shaders = nil }
    }

    -- Sound effects
    self.m_sounds["cloak_voice"] = sound_object([[nanosuit\mode_cloak_voice]])
    self.m_sounds["cloak_loop"] = sound_object([[nanosuit\mode_cloak_loop]])
    self.m_sounds["cloak_shoot"] = sound_object([[nanosuit\mode_cloak_shoot]])
    self.m_sounds["cloak_on"] = sound_object([[nanosuit\mode_cloak_on]])
    self.m_sounds["cloak_off"] = sound_object([[nanosuit\mode_cloak_off]])

    -- Prefetch textures
    game.prefetch_texture(self.m_cloak_texture .. ".dds")
end

function cloak:apply_effects()
    -- Play sounds
    self.m_sounds.cloak_voice:play_at_pos(db.actor, VEC_ZERO, 0, sound_object.s2d)
    self.m_sounds.cloak_on:play_at_pos(db.actor, VEC_ZERO, 0, sound_object.s2d)
    self.m_sounds.cloak_loop:play_at_pos(db.actor, VEC_ZERO, 0, sound_object.s2d + sound_object.looped)

    -- Register callbacks
    RegisterScriptCallback("actor_on_update", self)
    RegisterScriptCallback("actor_item_to_slot", self)
    RegisterScriptCallback("actor_item_to_ruck", self)
    RegisterScriptCallback("actor_on_item_drop", self)
    RegisterScriptCallback("actor_on_weapon_fired", self)

    -- Override visibility from NPCs
    self.m_cache["visibility_functor"] = visual_memory_manager.get_visible_value
    visual_memory_manager.get_visible_value = function(...) return self:get_visible_value(...) end

    -- Set player invisible
    self.m_cache["actor_shaders"] = db.actor:get_shaders(true)
    -- FIXME set_shader(-1, ...) is about 20x more costly than iterating through the meshes manually
    -- db.actor:set_shader(-1, self.m_cloak_shader, self.m_cloak_texture, true)
    for idx,_ in pairs(self.m_cache["actor_shaders"]) do
        db.actor:set_shader(idx, self.m_cloak_shader, self.m_cloak_texture, true)
    end

    -- Set items invisible
    for slot,_ in pairs(self.m_cache["items_shaders"]) do
        local obj = db.actor:item_in_slot(slot)
        if obj then
            self:set_item_invisible(obj, slot)
        end
    end
end

function cloak:remove_effects()
    -- Play sounds
    self.m_sounds.cloak_off:play_at_pos(db.actor, VEC_ZERO, 0, sound_object.s2d)
    self.m_sounds.cloak_loop:stop()

    -- Unregister callbacks
    UnregisterScriptCallback("actor_on_update", self)
    UnregisterScriptCallback("actor_item_to_slot", self)
    UnregisterScriptCallback("actor_item_to_ruck", self)
    UnregisterScriptCallback("actor_on_item_drop", self)
    UnregisterScriptCallback("actor_on_weapon_fired", self)

    -- Restore visibility from NPCs
    visual_memory_manager.get_visible_value = self.m_cache["visibility_functor"]

    -- Restore player visibility
    for idx,save in pairs(self.m_cache["actor_shaders"]) do
        db.actor:set_shader(idx, save.shader, save.texture, true)
    end

    -- Restore items visibility
    for slot,data in pairs(self.m_cache["items_shaders"]) do
        local obj = db.actor:item_in_slot(slot)
        if obj and data.id == obj:id() then
            self:set_item_visible(obj, slot)
        end
    end
end

function cloak:set_item_visible(obj, slot)
    for idx,save in pairs(self.m_cache["items_shaders"][slot]["shaders"]) do
        obj:set_shader(idx, save.shader, save.texture, true)
    end
    self.m_cache["items_shaders"][slot]["id"] = nil
    self.m_cache["items_shaders"][slot]["shaders"] = nil
end

function cloak:set_item_invisible(obj, slot)
    self.m_cache["items_shaders"][slot]["id"] = obj:id()
    self.m_cache["items_shaders"][slot]["shaders"] = obj:get_shaders(true)
    -- FIXME set_shader(-1, ...) is about 20x more costly than iterating through the meshes manually
    -- obj:set_shader(-1, self.m_cloak_shader, self.m_cloak_texture, true)
    for idx,_ in pairs(self.m_cache["items_shaders"][slot]["shaders"]) do
        obj:set_shader(idx, self.m_cloak_shader, self.m_cloak_texture, true)
    end
end

-- FIXME : This fails if the NPC sees the actor before the cloak is applied, right now you need to break vision for this to take effect
function cloak:get_visible_value(npc, who, time_delta, time_quant, luminosity, velocity_factor, velocity, distance, object_distance, always_visible_distance)
    local original_value = self.m_cache["visibility_functor"](npc, who, time_delta, time_quant, luminosity, velocity_factor, velocity, distance, object_distance, always_visible_distance)
    if not npc or not who or who:id() ~= AC_ID then
        return original_value
    end
    if object_distance > self.m_cloak_npc_see_distance then
        return 0
    end

    local distance_factor = 1 - (object_distance / self.m_cloak_npc_see_distance)
    return original_value * distance_factor
end

function cloak:actor_on_update()
    -- Switch to armor mode when out of energy
    if self.m_core.m_energy <= 0 then
        self.m_core:change_mode(self.m_core.m_default_mode)
        return
    end

    -- Cloak energy use
    if time_global() - self.m_energy_last_use > self.m_energy_rate then
        local movement = db.actor:get_movement_speed()
        local speed_mps = nanosuit_utils.vec_magnitude_xz(movement)
        local energy_use = self.m_energy_use_min + normalize(speed_mps, 0, 6) * self.m_energy_use_max

        self.m_core:use_energy(energy_use)
        self.m_energy_last_use = time_global()
    end
end

function cloak:actor_on_weapon_fired()
    self.m_sounds.cloak_shoot:play_at_pos(db.actor, VEC_ZERO, 0, sound_object.s2d)
    self.m_core:use_energy(100)
    self.m_core:change_mode(self.m_core.m_default_mode)
end

function cloak:actor_item_to_slot(obj)
    for slot,_ in pairs(self.m_cache["items_shaders"]) do
        local obj_in_slot = db.actor:item_in_slot(slot)
        if obj_in_slot and obj_in_slot:id() == obj:id() then
            self:set_item_invisible(obj, slot)
        end
    end
end

function cloak:actor_item_to_ruck(obj)
    for slot,data in pairs(self.m_cache["items_shaders"]) do
        if data.id == obj:id() then
            self:set_item_visible(obj, slot)
        end
    end
end

function cloak:actor_on_item_drop(obj)
    for slot,data in pairs(self.m_cache["items_shaders"]) do
        if data.id == obj:id() then
            self:set_item_visible(obj, slot)
        end
    end
end