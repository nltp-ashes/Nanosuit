---==================================================================================================================---
---                                                                                                                  ---
---    Original Author(s) : NLTP_ASHES                                                                               ---
---    Edited : N/A                                                                                                  ---
---    Date : 02/05/2025                                                                                             ---
---    License : Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International (CC BY-NC-SA 4.0)           ---
---                                                                                                                  ---
---    Script used to handle the logic of armor mode of the Nanosuit addon.                                          ---
---                                                                                                                  ---
---==================================================================================================================---

-- ---------------------------------------------------------------------------------------------------------------------
-- Constants, global variables and imported functions
-- ---------------------------------------------------------------------------------------------------------------------

-- Imports
localized_sound_object  = nanosuit_utils.localized_sound_object
hit_types_enum          = nanosuit_utils.hit_types_enum

-- ---------------------------------------------------------------------------------------------------------------------
-- Armor mode class
-- ---------------------------------------------------------------------------------------------------------------------

class "armor" (nanosuit_mode.abstract_mode)

function armor:__init(core, name) super(core, name)
    -- Protection related variables (value is hit power armor can absorb)
    self.m_protection_map[hit_types_enum.burn] = 5.0
    self.m_protection_map[hit_types_enum.shock] = 1.0
    self.m_protection_map[hit_types_enum.chemical_burn] = 2.0
    self.m_protection_map[hit_types_enum.radiation] = 0.5
    self.m_protection_map[hit_types_enum.telepathic] = nil
    self.m_protection_map[hit_types_enum.wound] = 2.0
    self.m_protection_map[hit_types_enum.fire_wound] = 2.0
    self.m_protection_map[hit_types_enum.strike] = nil
    self.m_protection_map[hit_types_enum.explosion] = 1.0
    self.m_protection_map[hit_types_enum.wound_2] = 1.0
    self.m_protection_map[hit_types_enum.light_burn] = 5.0

    -- Sound effects
    self.m_sounds.armor_voice = localized_sound_object([[nanosuit\voice\mode_armor_voice]])
    self.m_sounds.armor_on = sound_object([[nanosuit\modes\armor\mode_armor_on]])
    self.m_sounds.impacts = {
        sound_object([[nanosuit\modes\armor\mode_armor_hit_01]]),
        sound_object([[nanosuit\modes\armor\mode_armor_hit_02]]),
        sound_object([[nanosuit\modes\armor\mode_armor_hit_03]]),
        sound_object([[nanosuit\modes\armor\mode_armor_hit_04]]),
        sound_object([[nanosuit\modes\armor\mode_armor_hit_05]])
    }
end

function armor:apply_effects()
    nanosuit_mode.abstract_mode.apply_effects(self)

    -- Play sounds
    self.m_sounds.armor_voice:play_at_pos(db.actor, VEC_ZERO, 0, sound_object.s2d)
    self.m_sounds.armor_on:play_at_pos(db.actor, VEC_ZERO, 0, sound_object.s2d)

    -- Register callbacks
    RegisterScriptCallback("actor_on_before_hit", self)
end

function armor:remove_effects()
    nanosuit_mode.abstract_mode.remove_effects(self)

    -- Unregister callbacks
    UnregisterScriptCallback("actor_on_before_hit", self)
end

function armor:actor_on_before_hit(scripted_hit, bone_id, flags)
    nanosuit_mode.abstract_mode.actor_on_before_hit(self, scripted_hit, bone_id, flags)

    -- Play sound
    if self.m_core.m_energy > 0 then
        if scripted_hit.type == hit_types_enum.fire_wound then
            local sfx = self.m_sounds.impacts[math.random(1, #self.m_sounds.impacts)]
            sfx:play_at_pos(db.actor, VEC_ZERO, 0, sound_object.s2d)
        end
    end
end